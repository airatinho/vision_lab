"""Спроектировать работу "RED_STATS", как он будет общаться с клиентами,
 как хранить данные, как масштабироваться и т.д"""

"""
В данном задании сервиса RED_STATS предполагаются инструменты внешнего взаимодействия 
клиента с сервисом, база данных хранения, и бекенд-прослойка между внешним сервисом и базой данных.


Исходя из задания , мы имеем следующие константы
1.id клиента (который получаем от RED) - int
2.id картинки -  int 
3. Значение  количество красного (которое получаем от RED)- допустим, int
4. Подписан ли клиент на оповещения по условию задания - bool
5. Заданное клиентом значение красного - int 
6. Дата отправки картинки

По архитектуре это будут две таблицы в базе данных - 
1 - таблица клиентов с уникальным значение id клиента, со статусом подписки на оповещения
и с заданной им константой красного 
2 - таблица картинок  с уникальным значение id картинки, с id клиента из таблицы 1, 
датой отрпавки картинки, значением красного картинки

Таблица 1 изменяемая - при добавлении новых клиентов, колонка с заданным количеством красного меняется
в зависимости от указанного клиентом значения во внешнем сервисе -
это могут задавать только авторизованные пользователи, при задании значения красного - 
создается post запрос на сервис  RED_STATS - который простым "set ... update" меняет значение по 
id клиента - аналогично со статусом подписки

Таблица 2 изменяемая - при добавлении новых картинок, RED_STATS обрабатывает возвращаемый сервисом
RED - id клиента, количество красного, время загрузки картинки
и id картинки - и заполняются соответсвующие поля. Далее, происходи проверка статуса подписки - если
клиент не подписан на оповещения, то ничего не происходит, а если подписан  - сравнивается значение красного
от заданного с текущим, и если текущее больше - клиент получает соответсвующее оповещение.

Когда клиент  через внешний сервис хочет получить статистику , он задает период времени, с 
определенной агрегацией по дате (по месяца, по неделям, и т.д. - по дефолту - по дням) - в это время 
бекенд делает запрос в базу данных с использованием двух таблиц, где используется указанный ранее 
алгоритм сравнения порогового красного значения с текущим значением красного картинки -
это простой селект с двумя таблицами, агрегацией по дате и суммированию количества значений красного
из второй таблицы больше порогового и id клиента первой таблицы (через условие case when), а в 
условии where ... between задается временной промежуток, указанный клиентом 
далее бекенд формирует ответ на внешний сервис и выдает ее пользователю
    

 
"""